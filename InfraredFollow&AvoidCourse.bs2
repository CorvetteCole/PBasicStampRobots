' {$STAMP BS2}
' {$PBASIC 2.5}
x VAR Word
y VAR Word
L VAR Word
R VAR Word
y=0
L=0
R=0
'***Check and see if the added gosubs in the avoidance code actually help it detect things faster


'IF (INX = %0) THEN   'X represents breadboard pin referring to whatever sensor chosen.
   'gosub something
  'ENDIF

Avoidance:

  PULSOUT 13, 830                        'Attempt to bring these back up to full speed once the rest of the code is working. Don't forget to change with avoidance values too
  PULSOUT 12, 670

  SELECT INL
    CASE %01000000, %01100000, %00100000, %10000000                ' Left line avoid
      PULSOUT 13, 830                                                      '12 is right motor
      PULSOUT 12, 750
      GOSUB Avoidance
    CASE %00000010, %00000110, %00000100, %00000001                   ' Right line avoid
      PULSOUT 13, 750
      PULSOUT 12, 670
      GOSUB Avoidance
    'CASE %11000011
      'GOSUB SCurve
    CASE %11111111, %01111111, %10111111, %11011111, %11101111, %11110111, %11111011, %11111101, %11111110
      GOSUB Read180
    CASE %11100000, %11100001
      GOSUB Left90
    CASE %00000111, %10000111
      GOSUB Right90
  ENDSELECT


    IF (IN7 = %1) AND (IN6 = %1) AND (IN5 = %1) AND (IN4 = %0) THEN GOSUB Left90
    'IF (L = 1) OR (L > 1) THEN GOSUB Left90                  'Trigger left turn

    IF (IN0 = %1) AND (IN1 = %1) AND (IN2 = %1) AND (IN3 = %0) THEN GOSUB Right90
    'IF (R = 1) OR (R > 1) THEN GOSUB Right90                 'Trigger right turn

    'IF (y = 3) OR (y > 3) THEN GOSUB ToEnd                       'Activates ending subroutine when the code is read

    'IF (y > 0) THEN y=y+1
    'IF (y = 60) THEN GOSUB FlashyLights

    IF (IN3 = %1) OR (IN4 = %1) AND (IN1 = %0) AND (IN6 = %0) THEN GOSUB ActivateFollow   'Switch to follow code. The in1 and in6 with and statement is meant to prevent false activation by other course activators

GOSUB Avoidance

Follow:
DO
  SELECT INL
    CASE %11000000, %11100000                 ' Pivot right
      PULSOUT 13, 650                                                '12 is right motor
      PULSOUT 12, 650
    CASE %01100000, %01110000                 ' Curve right
      PULSOUT 13, 700
      PULSOUT 12, 650
    CASE %00110000, %00100000                 ' Slight right
      PULSOUT 13, 750
      PULSOUT 12, 650
    CASE %00111000, %00010000                 ' Adjust right
      PULSOUT 13, 750
      PULSOUT 12, 650
    CASE %00011000                            ' Straight
       PULSOUT 13, 850
       PULSOUT 12, 650
    CASE %00011100, %00001000                 ' Adjust left
      PULSOUT 13, 850
      PULSOUT 12, 750
    CASE %00001100                            ' Slight left
      PULSOUT 13, 850
      PULSOUT 12, 750
    CASE %00000110, %00001110                 ' Curve left
      PULSOUT 13, 850
      PULSOUT 12, 800
    CASE %00000011, %00000111                 ' Pivot left
      PULSOUT 13, 850
      PULSOUT 12, 850
    CASE %10000000, %00000001, %00000000, %10000001
      GOSUB Avoidance
  ENDSELECT
LOOP

Read180:
PAUSE 1000
DO
 PULSOUT 13, 800
 PULSOUT 12, 700

 SELECT INL
  CASE %11110000, %11111000, %11110001, %11111001
   GOSUB Deg180Right
  CASE %00001111, %00011111, %10001111, %10011111
   GOSUB Deg180Left
  ENDSELECT

 'IF (IN7 = %1) AND (IN6 = %1) AND (IN5 = %1) AND (IN4 = %1) AND (IN1 = %0) THEN GOSUB Deg180Right   'Trigger 180 degree turn upon hitting code

 'IF (IN0 = %1) AND (IN1 = %1) AND (IN2 = %1) AND (IN3 = %1) AND (IN6 = %0) THEN GOSUB Deg180Left

LOOP

SCurve:
PAUSE 1000
FOR x=1 TO 20
 PULSOUT 13, 650
 PULSOUT 12, 850
 PAUSE 20
NEXT
FOR x=1 TO 15
 PULSOUT 13, 850
 PULSOUT 12, 850
 PAUSE 20
NEXT
PAUSE 1000
FOR x=1 TO 20
 PULSOUT 13, 850
 PULSOUT 12, 650
 PAUSE 20
NEXT
FOR x=1 TO 15
 PULSOUT 13, 650
 PULSOUT 12, 650
 PAUSE 20
NEXT
GOSUB Avoidance

ToEnd:                    'This code can be removed if alternative timer method works (but it may stay if I like it better, I'm indecisive)
FOR x=1 TO 30
 PULSOUT 13, 850
 PULSOUT 12, 650
 PAUSE 20
NEXT
GOSUB FlashyLights

Deg180Right:
R=0
L=0
FOR x=1 TO 6
 PULSOUT 13, 850
 PULSOUT 12, 650
 PAUSE 20
NEXT
FOR x=1 TO 54
 PULSOUT 13, 850
 PULSOUT 12, 750
 PAUSE 20
NEXT
GOSUB Avoidance

Deg180Left:
R=0
L=0
FOR x=1 TO 6
 PULSOUT 13, 850
 PULSOUT 12, 650
 PAUSE 20
NEXT
FOR x=1 TO 54
 PULSOUT 13, 750
 PULSOUT 12, 650
 PAUSE 20
NEXT
GOSUB Avoidance

Right90:
R=0
L=0
FOR x=1 TO 19
 PULSOUT 13, 850
 PULSOUT 12, 650
 PAUSE 20
NEXT
FOR x=1 TO 14
 PULSOUT 13, 850
 PULSOUT 12, 850
 PAUSE 20
NEXT
GOSUB Avoidance

Left90:
R=0
L=0
FOR x=1 TO 19
 PULSOUT 13, 850
 PULSOUT 12, 650
 PAUSE 20
NEXT
FOR x=1 TO 14
 PULSOUT 13, 650
 PULSOUT 12, 650
 PAUSE 20
NEXT
GOSUB Avoidance

ActivateFollow:
y=y+1     'Adds 1 to y everytime the middle sensors are activated initially. This will happen when going across the ending code, allowing that to be read
DO
 PULSOUT 13, 850
 PULSOUT 12, 650
  SELECT INL
   CASE %10000000, %00000001, %00000000, %10000001
    GOSUB Avoidance
  ENDSELECT
 IF (IN3 = %1) OR (IN4 = %1) AND (IN1 = %0) AND (IN6 = %0) THEN GOSUB Follow
LOOP

FlashyLights:
DO
 PAUSE 100
  HIGH 8
 PAUSE 100
  LOW 9
 PAUSE 100
  HIGH 9
 PAUSE 100
  LOW 8
LOOP